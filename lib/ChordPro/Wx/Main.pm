#! perl

use strict;
use warnings;
use utf8;

################ Entry ################

our $options;

package ChordPro::Wx::WxChordPro;

use parent qw( Wx::App ChordPro::Wx::Main );

use ChordPro::Wx::Config;

use Wx qw( wxACCEL_CTRL WXK_CONTROL_Q wxID_EXIT );

sub run {
    $options = shift;

    #### Start ################

    ChordPro::Wx::WxChordPro->new->MainLoop();

}

sub OnInit {
    my ( $self ) = shift;

    $self->SetAppName("ChordPro");
    $self->SetVendorName("ChordPro.ORG");
    Wx::InitAllImageHandlers();
    ChordPro::Wx::Config::Setup;

    my $main = ChordPro::Wx::Main->new;
    return 0 unless $main->init($options);

    $self->SetTopWindow($main);
    $main->Show(1);

    if ( $options->{maximize} ) {
	$main->Maximize(1);
    }

    elsif ( $options->{geometry}
	    && $options->{geometry} =~ /^(?:(\d+)x(\d+))?(?:([+-]\d+)([+-]\d+))?$/ ) {
	$main->SetSize( $1, $2 )
	  if defined($1) && defined($2);
	$main->Move( $3+0, $4+0 )
	  if defined($3) && defined($4);
    }

    return 1;
}

################ Static & Overrides ################

use Wx qw[:everything];
use ChordPro::Wx::Utils;
use File::Basename;

# Override Wx::Bitmap to use resource search.
my $wxbitmapnew = \&Wx::Bitmap::new;
no warnings 'redefine';
*Wx::Bitmap::new = sub {
    # Only handle Wx::Bitmap->new(file, type) case.
    goto &$wxbitmapnew if @_ != 3 || -f $_[1];
    my ($self, @rest) = @_;
    $rest[0] = ChordPro::Paths->get->findres( basename($rest[0]), class => "icons" );
    $rest[0] ||= ChordPro::Paths->get->findres( "missing.png", class => "icons" );
    $wxbitmapnew->($self, @rest);
};

# Synchronous system call. Used in ChordPro::Utils module.
sub ::sys { Wx::ExecuteArgs( \@_, wxEXEC_SYNC | wxEXEC_HIDE_CONSOLE ); }

use warnings 'redefine';

################ Main ################

package ChordPro::Wx::Main;

use parent qw( ChordPro::Wx::Main_wxg );

use ChordPro;
use ChordPro::Paths;
use File::Basename;

our $VERSION = $ChordPro::VERSION;

# ChordPro::Wx::Main_wxg is generated by wxGlade and contains
# all UI associated code.

use Wx qw[:everything];
use Wx::Locale gettext => '_T';

use ChordPro::Wx::Config;
use ChordPro::Wx::Utils;
use ChordPro::Output::Common;
use ChordPro::Utils qw( demarkup is_msw is_macos );
use Encode qw(decode_utf8 encode_utf8);

sub log {
    my ( $self, $level, $msg, $info ) = @_;
    $msg =~ s/\n+$//;

    #    $msg = "[$level] $msg";
    if ( $level eq 'I' ) {
	Wx::LogMessage( "%s", $msg);
    }
    if ( $level eq 'S' ) {
	Wx::LogMessage( "%s", $msg );
    }
    elsif ( $level eq 'W' ) {
	Wx::LogWarning( "%s", $msg);
    }
    elsif ( $level eq 'E' ) {
	Wx::LogError( "%s", $msg);
    }
    elsif ( $level eq 'F' ) {
	Wx::LogFatal( "%s", $msg);
    }
}

sub new {
    my $pkg = shift;
    my $self = bless $pkg->SUPER::new(@_), __PACKAGE__;

    Wx::Event::EVT_IDLE($self, $self->can('OnIdle'));
    Wx::Event::EVT_CLOSE($self, $self->can('OnClose'));

    #my $log = Wx::LogTextCtrl->new( $self->{p_bottom}{t_messages} );
    my $log = Wx::LogStderr->new;
    Wx::Log::SetActiveTarget( $log );

    # Normal (informational),
    #Wx::LogMessage("Message");
    # LogTextCtrl -> Normal.
    #Wx::LogStatus("Status");
    # LogTextCtrl -> "Error: ..."
    #Wx::LogError("Error");
    # To stderr ("Debug: ...")
    #Wx::LogDebug("Debug");

    $self->SetTitle("ChordPro");
    $self->SetIcon( Wx::Icon->new(CP->findres( "chordpro-icon.png", class => "icons" ), wxBITMAP_TYPE_ANY) );

    # For the initial panel, suppress the menubar by providing an empty one.
    # On Windows this causes a problem with the layout, so we'll provide
    # a dummy menubar.
    my $menu = Wx::MenuBar->new;
    if ( is_msw ) {
	my $tmp_menu;
	$tmp_menu = Wx::Menu->new();
	$tmp_menu->Append(wxID_EXIT, _T("Exit"), _T("Close window and exit"));
	$menu->Append($tmp_menu, _T("File"));
    }
    $self->SetMenuBar($menu);

    $self->attach_events;

    # MacOS file dialogs always filters with all wildcards. So if there is
    # an "All files|*.*" at the end, all file will match.
    # So either remove the *.* or use the following code:
    Wx::SystemOptions::SetOption("osx.openfiledialog.always-show-types", 1)
	if 0 && is_macos;

    $self;
}


sub attach_events {
    my ( $self ) = @_;

    # To select actions, we use a panel with a bitmap and a text.
    # We need to attach a mouse click (EVT_LEFT_UP) to the panel and
    # all of its children.

    my %panels =
      ( new	  => "OnNew",
	open      => "OnOpen",
	sbexport  => "OnExportFolder",
	example   => "OnHelp_Example",
	site      => "OnHelp_Site",
	help      => "OnHelp_ChordPro",
	exit      => "OnClose",
      );
    while ( my ( $p, $handler ) = each %panels ) {
	my $panel = $self->{"pn_$p"};
	#$handler = "OnI".ucfirst($p);
	warn("XXX $handler") unless my $h = $self->can($handler);
	$handler = sub { &$h($self) };
	Wx::Event::EVT_LEFT_UP( $panel, $handler );
	foreach my $n ( $panel->GetChildren ) {
	    Wx::Event::EVT_LEFT_UP( $n, $handler );
	}
    }
}

sub select_mode {
    my ( $self, $mode ) = @_;
    my @panels = panels;

    if ( $mode eq "initial" ) {
	$self->{$_}->Show(0) for @panels;
	$self->{p_initial}->Show(1);
	$self->refresh;
    }
    else {
	$self->{p_initial}->Show(0);
	$self->{$_}->Show( $_ eq "p_$mode" ) for @panels;
	$self->{"p_$mode"}->refresh;
    }
    $self->{sz_main}->Layout;
}

# Explicit (re)initialisation of this class.
sub init {
    my ( $self, $options ) = @_;

    ChordPro::Wx::Config::Load;


    $state{verbose} = $options->{verbose};
    $state{trace}   = $options->{trace};
    $state{debug}   = $options->{debug};
    $state{customlib} = delete $ENV{CHORDPRO_LIB};

    $self->SetStatusBar(undef);

    $self->GetPreferences;

    if ( @ARGV ) {
	my $arg = decode_utf8(shift(@ARGV));
	if ( -d $arg && $self->{p_sbexport}->opendir($arg) ) {
	    $self->select_mode("sbexport");
	    return 1;
	}
	elsif ( $self->{p_editor}->openfile($arg) ) {
	    $self->select_mode("editor");
	    return 1;
	}
	return 0;
    }
    else {
	$self->select_mode("initial");
    }
    return 1;
}

################ Internal methods ################

sub refresh {
    my ( $self ) = @_;
    $self->init_recents;
    $self->SetMenuBar(undef);
}

sub init_recents {
    my ( $self ) = @_;

    my $r = $state{recents};

    if ( defined $r->[0] ) {
	my $ctl = $self->{lb_recent};
	$ctl->Clear;
	$ctl->Enable(1);
	my $i = 0;
	for my $file ( @$r ) {
	    last unless defined $file;
	    $ctl->Append( basename($file) );
	    $ctl->SetClientData( $i, $file );
	    $i++;
	}
    }
    $self->{rb_createrecent}->SetSelection(0);
    $self->OnCreateRecent;
}

sub GetPreferences {
    my ( $self ) = @_;

    # Find config setting.
    my $p = lc( $preferences{cfgpreset} );
    if ( ",$p" =~ quotemeta( "," . _T("Custom") ) ) {
	$state{cfgpresetfile} = $preferences{configfile};
    }
    my @presets;
    foreach ( @{$state{styles}} ) {
	if ( ",$p" =~ quotemeta( "," . lc($_) ) ) {
	    push( @presets, $_ );
	}
    }
    $preferences{cfgpreset} = \@presets;

    # Find transcode setting.
    $p = lc $preferences{xcode};
    if ( $p ) {
	if ( $p eq lc(_T("-----")) ) {
####????	    $p = $prefctl->{xcode};

	}
	else {
	    my $n = "";
	    for ( @{ $self->notationlist } ) {
		next unless $_ eq $p;
		$n = $p;
		last;
	    }
	    $p = $n;
	}
    }
    $preferences{xcode} = $p;
    restorewinpos( $self, "main" );
    $self->Show(1);
}

sub SavePreferences {
    my ( $self ) = @_;

    savewinpos( $self, "main" );

    #### ????
#    if ( $preferences{cfgpreset} ) {
#	local $preferences{cfgpreset} = join( ",", @{$preferences{cfgpreset}} );
#	for ( keys( %$prefctl ) ) {
#	    $conf->Write( "preferences/$_", $self->{"prefs_$_"} );
#	}
#    }

    ChordPro::Wx::Config::Store;
}

################ Event handlers ################

sub OnRecentDclick {
    my ($self, $event) = @_;
    my $file = $self->{l_recent}->GetLabel;
    $self->select_mode("editor");
    $self->{p_editor}->openfile( $file, 0 );
    $event->Skip;
}

sub OnRecentSelect {
    my ($self, $event) = @_;
    my $n = $self->{lb_recent}->GetSelection;
    my $file = $self->{lb_recent}->GetClientData($n);
    $self->{l_recent}->SetLabel($file);
    $self->{l_recent}->SetToolTip($file);
    $event->Skip;
}

sub OnCreateRecent {
    my ( $self, $event ) = @_;
    if ( $self->{rb_createrecent}->GetSelection == 0 ) {
	$self->{p_create}->Show(1);
	$self->{p_recent}->Show(0);
    }
    else {
	$self->{p_create}->Show(0);
	$self->{p_recent}->Show(1);
	$self->{p_recent}->SetSize( $self->{p_create}->GetSize );
    }
    $self->{sz_recent}->Layout;
    $self->{sz_createrecentpanels}->Layout;
}

sub OnOpen {
    my ( $self, $event ) = @_;

    # We handle the dialog here, so we do not have to switch to the editor
    # unless there's real editing to do.

    my $fd = Wx::FileDialog->new
      ($self, _T("Choose ChordPro file"),
       dirname($state{recents}[0]//""), "",
       "ChordPro files (*.cho,*.crd,*.chopro,*.chord,*.chordpro,*.pro)|*.cho;*.crd;*.chopro;*.chord;*.chordpro;*.pro".
       (is_macos ? ";*.txt" : "|All files|*.*"),
       0|wxFD_OPEN|wxFD_FILE_MUST_EXIST,
       wxDefaultPosition);
    my $ret = $fd->ShowModal;
    if ( $ret == wxID_OK ) {
	$self->select_mode("editor");
	$self->{p_editor}->openfile( $fd->GetPath, 1 );
    }
    $fd->Destroy;
}

sub OnNew {
    my( $self, $event ) = @_;
    $self->select_mode("editor");
    $self->{p_editor}->open(1);
}

sub OnExportFolder {
    my ($self, $event) = @_;
    $self->select_mode("sbexport");
}

sub OnClose {
    my ( $self, $event ) = @_;
    $self->SavePreferences;
    return unless $self->{p_editor}->checksaved;
    $self->Destroy;
}

sub OnHelp_Site {
    my ($self, $event) = @_;
    Wx::LaunchDefaultBrowser("https://www.chordpro.org/");
}

sub OnHelp_ChordPro {
    my ($self, $event) = @_;
    Wx::LaunchDefaultBrowser("https://www.chordpro.org/chordpro/");
}

sub OnHelp_Config {
    my ($self, $event) = @_;
    Wx::LaunchDefaultBrowser("https://www.chordpro.org/chordpro/chordpro-configuration/");
}

sub OnHelp_Example {
    my ($self, $event) = @_;
    $self->select_mode("editor");
    $self->{p_editor}->openfile( CP->findres( "swinglow.cho", class => "examples" ) );
}

sub _aboutmsg {
    my ( $self ) = @_;
    my $firstyear = 2016;
    my $year = 1900 + (localtime(time))[5];
    if ( $year != $firstyear ) {
	$year = "$firstyear,$year";
    }

    # Sometimes version numbers are localized...
    my $dd = sub { my $v = $_[0]; $v =~ s/,/./g; $v };

    my $msg = join
      ( "",
	"ChordPro Preview Editor version ",
	$dd->($ChordPro::VERSION),
	"\n",
	"https://www.chordpro.org\n",
	"Copyright $year Johan Vromans <jvromans\@squirrel.nl>\n",
	"\n",
	"GUI designed with wxGlade\n\n",
	"Run-time information:\n",
	$::config->{settings}
	? ::runtimeinfo()
	: "  Not yet available (try again later)\n"
      );

    return $msg;
}

sub OnAbout {
    my ($self, $event) = @_;

    # Need a custom dialog since the mesage doesn't look well in
    # a non-proportional font.
    my $md = AboutDialog->new
      ( $self, -1, "About ChordPro",
	wxDefaultPosition, wxDefaultSize,
	wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER,
	"About",
	_aboutmsg()
      );
    restorewinpos( $md, "about" );
    $md->ShowModal;
    savewinpos( $md, "about" );
    $md->Destroy;
}

sub OnIdle {
    my ( $self, $event ) = @_;
    return if $self->{p_initial}->IsShown;
    my $f = $state{windowtitle} // "ChordPro";
    $f = "*$f" if $self->{p_editor}->{t_editor}->IsModified;
    $self->SetTitle($f);
}

################ End of Event handlers ################

package AboutDialog;

use Wx qw[:everything];
use parent -norequire, qw(Wx::Dialog);
use strict;

sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name, $text ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: MyDialog::new
    $style = wxDEFAULT_DIALOG_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );

    # Infer size from text.
    my ( $lc, $ll ) = ( 0, 0 );
    for ( split( /[\r\n]+/, $text ) ) {
	$lc++;
	$ll = length($_) if length($_) > $ll;
    }
    $self->SetSize(Wx::Size->new(10*$ll, 24*$lc));

    $self->SetTitle("About ChordPro");
    $self->SetFont(Wx::Font->new(11, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, 0, ""));

    $self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);

    $text =~ s/[\r\n]+$//;
    $self->{text} = Wx::TextCtrl->new($self, wxID_ANY, $text, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    $self->{text}->SetFont(Wx::Font->new(11, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, 0, ""));
    $self->{text}->SetInsertionPoint(0);
    $self->{sizer_1}->Add($self->{text}, 1, wxEXPAND|wxLEFT|wxRIGHT|wxTOP, 5);

    $self->{sizer_2} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_1}->Add($self->{sizer_2}, 0, wxALIGN_RIGHT|wxALL, 4);

    $self->{sizer_2}->Add(1, 1, 0, wxEXPAND, 0);

    $self->{button_OK} = Wx::Button->new($self, wxID_OK, "");
    $self->{button_OK}->SetDefault();
    $self->{sizer_2}->Add($self->{button_OK}, 0, 0, 0);

    $self->SetSizer($self->{sizer_1});

    $self->SetAffirmativeId($self->{button_OK}->GetId());

    $self->Layout();
    # end wxGlade
    return $self;

}

# end of class AboutDialog

1;
