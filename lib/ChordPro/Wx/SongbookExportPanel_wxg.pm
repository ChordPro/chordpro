# generated by wxGlade 1.1.0b1 on Tue Oct 15 14:53:54 2024
#
# To get wxPerl visit http://www.wxperl.it
#

use Wx qw[:allclasses];
use strict;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package ChordPro::Wx::SongbookExportPanel_wxg;

use Wx qw[:everything];
use base qw(Wx::Panel);
use strict;

use Wx::Locale gettext => '_T';
sub new {
    my( $self, $parent, $id, $pos, $size, $style, $name ) = @_;
    $parent //= undef;
    $id     //= -1;
    $pos    //= wxDefaultPosition;
    $size   //= wxDefaultSize;
    $name   //= "";

    # begin wxGlade: ChordPro::Wx::SongbookExportPanel_wxg::new
    use ChordPro::Wx::Utils;
    $self = $self->SUPER::new( $parent, $id, $pos, $size, $style, $name );
    $self->SetSize(Wx::Size->new(558, 1054));
    
    $self->{sz_main} = Wx::BoxSizer->new(wxVERTICAL);
    
    $self->{sw_main} = Wx::SplitterWindow->new($self, wxID_ANY);
    $self->{sw_main}->SetMinimumPaneSize(20);
    $self->{sw_main}->SetSashGravity(0.5);
    $self->{sz_main}->Add($self->{sw_main}, 1, wxEXPAND, 0);
    
    $self->{p_left} = Wx::Panel->new($self->{sw_main}, wxID_ANY);
    
    $self->{sz_left} = Wx::BoxSizer->new(wxVERTICAL);
    
    $self->{sz_export_inner} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sz_left}->Add($self->{sz_export_inner}, 1, wxEXPAND, 0);
    
    $self->{sz_sbexp} = Wx::FlexGridSizer->new(8, 2, 5, 5);
    $self->{sz_export_inner}->Add($self->{sz_sbexp}, 0, wxEXPAND, 5);
    
    $self->{label_1} = Wx::StaticText->new($self->{p_left}, wxID_ANY, _T("Folder"));
    $self->{sz_sbexp}->Add($self->{label_1}, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    $self->{dp_folder} = Wx::DirPickerCtrl->new($self->{p_left}, wxID_ANY, "", _T("Select folder"), wxDefaultPosition, wxDefaultSize, wxDIRP_USE_TEXTCTRL);
    $self->{sz_sbexp}->Add($self->{dp_folder}, 0, wxEXPAND, 0);
    
    $self->{sz_sbexp}->Add(1, 1, 0, 0, 0);
    
    $self->{sizer_2} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sz_sbexp}->Add($self->{sizer_2}, 1, wxEXPAND, 0);
    
    $self->{l_info} = Wx::StaticText->new($self->{p_left}, wxID_ANY, _T("Select a folder with ChordPro songs"));
    $self->{sizer_2}->Add($self->{l_info}, 1, wxALIGN_CENTER_VERTICAL, 0);
    
    $self->{cb_recursive} = Wx::CheckBox->new($self->{p_left}, wxID_ANY, _T("Recursive"));
    $self->{cb_recursive}->Enable(0);
    $self->{sizer_2}->Add($self->{cb_recursive}, 0, wxEXPAND, 0);
    
    $self->{cb_filelist} = Wx::CheckBox->new($self->{p_left}, wxID_ANY, _T("Ignore filelist.txt"));
    $self->{cb_filelist}->Enable(0);
    $self->{sizer_2}->Add($self->{cb_filelist}, 0, wxEXPAND|wxLEFT, 10);
    
    $self->{sz_sbexp}->Add(1, 1, 0, 0, 0);
    
    $self->{sz_sbexp}->Add(1, 1, 0, 0, 0);
    
    my $static_line_2 = Wx::StaticLine->new($self->{p_left}, wxID_ANY);
    $self->{sz_sbexp}->Add($static_line_2, 0, 0, 0);
    
    my $static_line_3 = Wx::StaticLine->new($self->{p_left}, wxID_ANY);
    $self->{sz_sbexp}->Add($static_line_3, 0, 0, 0);
    
    $self->{l_cover} = Wx::StaticText->new($self->{p_left}, wxID_ANY, _T("Cover"));
    $self->{sz_sbexp}->Add($self->{l_cover}, 0, wxALIGN_CENTER_VERTICAL, 0);
    
    $self->{fp_cover} = Wx::FilePickerCtrl->new($self->{p_left}, wxID_ANY, "", _T("Select PDF cover document"), _T("PDF files (*.pdf)|*.pdf"), wxDefaultPosition, wxDefaultSize, wxFLP_FILE_MUST_EXIST|wxFLP_OPEN|wxFLP_USE_TEXTCTRL);
    $self->{fp_cover}->SetToolTip(_T("Select a PDF document to be prepended as cover page."));
    $self->{sz_sbexp}->Add($self->{fp_cover}, 0, wxEXPAND, 0);
    
    my $label_3 = Wx::StaticText->new($self->{p_left}, wxID_ANY, "");
    $self->{sz_sbexp}->Add($label_3, 0, 0, 0);
    
    $self->{cb_stdcover} = Wx::CheckBox->new($self->{p_left}, wxID_ANY, _T("Add a standard cover page"));
    $self->{cb_stdcover}->SetToolTip(_T("Add a standard cover page to the output."));
    $self->{sz_sbexp}->Add($self->{cb_stdcover}, 0, wxEXPAND, 0);
    
    $self->{l_exporttitle} = Wx::StaticText->new($self->{p_left}, wxID_ANY, _T("Title"));
    $self->{l_exporttitle}->Enable(0);
    $self->{sz_sbexp}->Add($self->{l_exporttitle}, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    $self->{t_exporttitle} = Wx::TextCtrl->new($self->{p_left}, wxID_ANY, "");
    $self->{t_exporttitle}->SetToolTip(_T("Specify the title for the songbook."));
    $self->{t_exporttitle}->Enable(0);
    $self->{sz_sbexp}->Add($self->{t_exporttitle}, 0, wxEXPAND, 5);
    
    $self->{l_exportstitle} = Wx::StaticText->new($self->{p_left}, wxID_ANY, _T("Subtitle"));
    $self->{l_exportstitle}->Enable(0);
    $self->{sz_sbexp}->Add($self->{l_exportstitle}, 0, wxALIGN_CENTER_VERTICAL, 5);
    
    $self->{t_exportstitle} = Wx::TextCtrl->new($self->{p_left}, wxID_ANY, "");
    $self->{t_exportstitle}->SetToolTip(_T("Specify the title for the songbook."));
    $self->{t_exportstitle}->Enable(0);
    $self->{sz_sbexp}->Add($self->{t_exportstitle}, 0, wxEXPAND, 5);
    
    use ChordPro::Utils qw(is_msw);
    $self->{sl_rearrange} = Wx::StaticLine->new($self->{p_left}, wxID_ANY);
    $self->{sl_rearrange}->Show(0) unless is_msw();
    $self->{sz_left}->Add($self->{sl_rearrange}, 0, wxBOTTOM|wxEXPAND|wxRESERVE_SPACE_EVEN_IF_HIDDEN|wxTOP, 5);
    
    $self->{l_rearrange} = Wx::StaticText->new($self->{p_left}, wxID_ANY, _T("Rearrange file list"));
    $self->{l_rearrange}->Show(0) unless is_msw();
    $self->{sz_left}->Add($self->{l_rearrange}, 0, wxEXPAND|wxRESERVE_SPACE_EVEN_IF_HIDDEN, 0);
    
    $self->{w_rearrange} = Wx::RearrangeCtrl->new($self->{p_left}, wxID_ANY, wxDefaultPosition, wxDefaultSize, [-1], ['Select and rearrange items']);
    $self->{w_rearrange}->Show(0) unless is_msw();
    $self->{sz_left}->Add($self->{w_rearrange}, 999, wxEXPAND|wxRESERVE_SPACE_EVEN_IF_HIDDEN, 0);
    
    $self->{sz_left}->Add(1, 1, 1, wxEXPAND, 0);
    
    my $static_line_1 = Wx::StaticLine->new($self->{p_left}, wxID_ANY);
    $self->{sz_left}->Add($static_line_1, 0, wxEXPAND|wxTOP, 5);
    
    $self->{sz_sbexp_buttons} = Wx::FlexGridSizer->new(1, 4, 0, 5);
    $self->{sz_left}->Add($self->{sz_sbexp_buttons}, 0, wxEXPAND|wxTOP, 5);
    
    $self->{l_status} = Wx::StaticText->new($self->{p_left}, wxID_ANY, "");
    $self->{sz_sbexp_buttons}->Add($self->{l_status}, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{b_prefs} = Wx::Button->new($self->{p_left}, wxID_PREFERENCES, "");
    $self->{sz_sbexp_buttons}->Add($self->{b_prefs}, 0, 0, 0);
    
    $self->{b_preview} = Wx::Button->new($self->{p_left}, wxID_ANY, _T("Preview"));
    $self->{b_preview}->SetDefault();
    $self->{sz_sbexp_buttons}->Add($self->{b_preview}, 0, 0, 5);
    
    $self->{b_msgs} = Wx::Button->new($self->{p_left}, wxID_ANY, _T("Show Messages"));
    $self->{sz_sbexp_buttons}->Add($self->{b_msgs}, 0, 0, 0);
    
    $self->{p_preview} = Wx::Panel->new($self->{sw_main}, wxID_ANY);
    
    $self->{sz_prv} = Wx::BoxSizer->new(wxVERTICAL);
    
    $self->{webview} = Wx::TextCtrl->new($self->{p_preview}, wxID_ANY, _T("Preview not available"), wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    $self->{sz_prv}->Add($self->{webview}, 1, wxEXPAND, 0);
    
    $self->{sz_buttons} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sz_prv}->Add($self->{sz_buttons}, 0, wxEXPAND, 0);
    
    $self->{sz_buttons}->Add(1, 1, 1, wxEXPAND, 0);
    
    $self->{b_preview_save} = Wx::Button->new($self->{p_preview}, wxID_SAVE, "");
    $self->{sz_buttons}->Add($self->{b_preview_save}, 0, wxRIGHT, 5);
    
    $self->{b_preview_close} = Wx::Button->new($self->{p_preview}, wxID_CLOSE, "");
    $self->{sz_buttons}->Add($self->{b_preview_close}, 0, 0, 0);
    
    $self->{p_preview}->SetSizer($self->{sz_prv});
    
    $self->{sz_sbexp_buttons}->AddGrowableCol(0);
    
    $self->{sz_sbexp}->AddGrowableCol(1);
    
    $self->{p_left}->SetSizer($self->{sz_left});
    
    $self->{sw_main}->SplitVertically($self->{p_left}, $self->{p_preview}, , -1);
    
    $self->SetSizer($self->{sz_main});
    
    $self->Layout();
    Wx::Event::EVT_CHECKBOX($self, $self->{cb_recursive}->GetId, $self->can('OnRecursive'));
    Wx::Event::EVT_CHECKBOX($self, $self->{cb_filelist}->GetId, $self->can('OnFilelistIgnore'));
    Wx::Event::EVT_CHECKBOX($self, $self->{cb_stdcover}->GetId, $self->can('OnStdCoverChecked'));
    Wx::Event::EVT_BUTTON($self, $self->{b_prefs}->GetId, $self->can('OnPreferences'));
    Wx::Event::EVT_BUTTON($self, $self->{b_preview}->GetId, $self->can('OnPreview'));
    Wx::Event::EVT_BUTTON($self, $self->{b_msgs}->GetId, $self->can('OnShowMessages'));
    Wx::Event::EVT_BUTTON($self, $self->{b_preview_save}->GetId, $self->can('OnPreviewSave'));
    Wx::Event::EVT_BUTTON($self, $self->{b_preview_close}->GetId, $self->can('OnPreviewClose'));

    # end wxGlade
    return $self;

}


sub OnRecursive {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::SongbookExportPanel_wxg::OnRecursive <event_handler>
    warn "Event handler (OnRecursive) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnFilelistIgnore {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::SongbookExportPanel_wxg::OnFilelistIgnore <event_handler>
    warn "Event handler (OnFilelistIgnore) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnStdCoverChecked {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::SongbookExportPanel_wxg::OnStdCoverChecked <event_handler>
    warn "Event handler (OnStdCoverChecked) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnPreferences {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::SongbookExportPanel_wxg::OnPreferences <event_handler>
    warn "Event handler (OnPreferences) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnPreview {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::SongbookExportPanel_wxg::OnPreview <event_handler>
    warn "Event handler (OnPreview) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnShowMessages {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::SongbookExportPanel_wxg::OnShowMessages <event_handler>
    warn "Event handler (OnShowMessages) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnPreviewSave {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::SongbookExportPanel_wxg::OnPreviewSave <event_handler>
    warn "Event handler (OnPreviewSave) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnPreviewClose {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::SongbookExportPanel_wxg::OnPreviewClose <event_handler>
    warn "Event handler (OnPreviewClose) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class ChordPro::Wx::SongbookExportPanel_wxg

1;

