#!/usr/bin/perl -w -- 
#
# generated by wxGlade 1.1.0b1 on Tue Nov 12 22:32:21 2024
#
# To get wxPerl visit http://www.wxperl.it
#

use Wx qw[:allclasses];
use strict;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package ChordPro::Wx::ColourSettingsDialog_wxg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;

sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent //= undef;
    $id     //= -1;
    $title  //= "";
    $pos    //= wxDefaultPosition;
    $size   //= wxDefaultSize;
    $name   //= "";

    # begin wxGlade: ChordPro::Wx::ColourSettingsDialog_wxg::new
    $style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxSTAY_ON_TOP
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->SetSize($self->ConvertDialogSizeToPixels(Wx::Size->new(374, 146)));
    $self->SetTitle("Colour Settings");
    
    $self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
    
    $self->{sz_editor} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_1}->Add($self->{sz_editor}, 1, wxEXPAND|wxLEFT|wxRIGHT|wxTOP, 5);
    
    $self->{t_editor} = Wx::TextCtrl->new($self, wxID_ANY, "{title: St. James Infirmary Blues}\n{subtitle: Traditional}\n\n# Song starts here.\nI went [Em]down to the [Am]St James In[Em]firmary\nI found my [Am]baby [B7]there\n", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    $self->{sz_editor}->Add($self->{t_editor}, 1, wxEXPAND|wxRIGHT, 5);
    
    $self->{sz_colours} = Wx::FlexGridSizer->new(8, 2, 5, 5);
    $self->{sz_editor}->Add($self->{sz_colours}, 1, wxEXPAND, 0);
    
    $self->{cp_0} = Wx::ColourPickerCtrl->new($self, wxID_ANY);
    $self->{sz_colours}->Add($self->{cp_0}, 1, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    my $l_0 = Wx::StaticText->new($self, wxID_ANY, "Standard text");
    $self->{sz_colours}->Add($l_0, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{cp_1} = Wx::ColourPickerCtrl->new($self, wxID_ANY);
    $self->{sz_colours}->Add($self->{cp_1}, 1, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    my $l_1 = Wx::StaticText->new($self, wxID_ANY, "Comments");
    $self->{sz_colours}->Add($l_1, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{cp_2} = Wx::ColourPickerCtrl->new($self, wxID_ANY);
    $self->{sz_colours}->Add($self->{cp_2}, 1, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    my $l_2 = Wx::StaticText->new($self, wxID_ANY, "Keywords");
    $self->{sz_colours}->Add($l_2, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{cp_3} = Wx::ColourPickerCtrl->new($self, wxID_ANY);
    $self->{sz_colours}->Add($self->{cp_3}, 1, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    my $l_3 = Wx::StaticText->new($self, wxID_ANY, "Brackets");
    $self->{sz_colours}->Add($l_3, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{cp_4} = Wx::ColourPickerCtrl->new($self, wxID_ANY);
    $self->{sz_colours}->Add($self->{cp_4}, 1, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    my $l_4 = Wx::StaticText->new($self, wxID_ANY, "Chords");
    $self->{sz_colours}->Add($l_4, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{cp_5} = Wx::ColourPickerCtrl->new($self, wxID_ANY);
    $self->{sz_colours}->Add($self->{cp_5}, 1, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    my $l_5 = Wx::StaticText->new($self, wxID_ANY, "Directives");
    $self->{sz_colours}->Add($l_5, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{cp_6} = Wx::ColourPickerCtrl->new($self, wxID_ANY);
    $self->{sz_colours}->Add($self->{cp_6}, 1, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    my $l_6 = Wx::StaticText->new($self, wxID_ANY, "Directive arguments");
    $self->{sz_colours}->Add($l_6, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{cp_7} = Wx::ColourPickerCtrl->new($self, wxID_ANY);
    $self->{sz_colours}->Add($self->{cp_7}, 1, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    my $l_7 = Wx::StaticText->new($self, wxID_ANY, "Annotations");
    $self->{sz_colours}->Add($l_7, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{sizer_2} = Wx::StdDialogButtonSizer->new();
    $self->{sizer_1}->Add($self->{sizer_2}, 0, wxALIGN_RIGHT|wxALL, 4);
    
    $self->{button_OK} = Wx::Button->new($self, wxID_OK, "");
    $self->{button_OK}->SetDefault();
    $self->{sizer_2}->AddButton($self->{button_OK});
    
    $self->{button_CANCEL} = Wx::Button->new($self, wxID_CANCEL, "");
    $self->{sizer_2}->AddButton($self->{button_CANCEL});
    
    $self->{sizer_2}->Realize();
    
    $self->{sz_colours}->AddGrowableCol(1);
    
    $self->SetSizer($self->{sizer_1});
    
    $self->SetAffirmativeId($self->{button_OK}->GetId());
    $self->SetEscapeId($self->{button_CANCEL}->GetId());
    
    $self->Layout();
    Wx::Event::EVT_COLOURPICKER_CHANGED($self, $self->{cp_0}->GetId, $self->can('OnColourChanged_0'));
    Wx::Event::EVT_COLOURPICKER_CHANGED($self, $self->{cp_1}->GetId, $self->can('OnColourChanged_1'));
    Wx::Event::EVT_COLOURPICKER_CHANGED($self, $self->{cp_2}->GetId, $self->can('OnColourChanged_2'));
    Wx::Event::EVT_COLOURPICKER_CHANGED($self, $self->{cp_3}->GetId, $self->can('OnColourChanged_3'));
    Wx::Event::EVT_COLOURPICKER_CHANGED($self, $self->{cp_4}->GetId, $self->can('OnColourChanged_4'));
    Wx::Event::EVT_COLOURPICKER_CHANGED($self, $self->{cp_5}->GetId, $self->can('OnColourChanged_5'));
    Wx::Event::EVT_COLOURPICKER_CHANGED($self, $self->{cp_6}->GetId, $self->can('OnColourChanged_6'));
    Wx::Event::EVT_COLOURPICKER_CHANGED($self, $self->{cp_7}->GetId, $self->can('OnColourChanged_7'));

    # end wxGlade
    return $self;

}


sub OnColourChanged_0 {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::ColourSettingsDialog_wxg::OnColourChanged_0 <event_handler>
    warn "Event handler (OnColourChanged_0) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnColourChanged_1 {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::ColourSettingsDialog_wxg::OnColourChanged_1 <event_handler>
    warn "Event handler (OnColourChanged_1) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnColourChanged_2 {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::ColourSettingsDialog_wxg::OnColourChanged_2 <event_handler>
    warn "Event handler (OnColourChanged_2) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnColourChanged_3 {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::ColourSettingsDialog_wxg::OnColourChanged_3 <event_handler>
    warn "Event handler (OnColourChanged_3) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnColourChanged_4 {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::ColourSettingsDialog_wxg::OnColourChanged_4 <event_handler>
    warn "Event handler (OnColourChanged_4) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnColourChanged_5 {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::ColourSettingsDialog_wxg::OnColourChanged_5 <event_handler>
    warn "Event handler (OnColourChanged_5) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnColourChanged_6 {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::ColourSettingsDialog_wxg::OnColourChanged_6 <event_handler>
    warn "Event handler (OnColourChanged_6) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnColourChanged_7 {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::ColourSettingsDialog_wxg::OnColourChanged_7 <event_handler>
    warn "Event handler (OnColourChanged_7) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class ChordPro::Wx::ColourSettingsDialog_wxg

1;

package MyApp;

use base qw(Wx::App);
use strict;

sub OnInit {
    my( $self ) = shift;

    Wx::InitAllImageHandlers();

    my $dialog = ChordPro::Wx::ColourSettingsDialog_wxg->new();

    $self->SetTopWindow($dialog);
    $dialog->Show(1);

    return 1;
}
# end of class MyApp

package main;

unless(caller){
    my $app = MyApp->new();
    $app->MainLoop();
}
