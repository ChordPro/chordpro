#! perl

use strict;
use warnings;
use utf8;

# Implementation of ChordPro::Wx::SongbookExportPanel_wxg details.

package ChordPro::Wx::SongbookExportPanel;

# ChordPro::Wx::SoongbookExport_wxg is generated by wxGlade and contains
# all UI associated code.

use parent qw( ChordPro::Wx::SongbookExportPanel_wxg );

use Wx qw[:everything];
use Wx::Locale gettext => '_T';
use ChordPro::Wx::Utils;
use constant CFGBASE => "songbookexport/";
use Encode qw( decode_utf8 encode_utf8 );
use ChordPro::Utils qw( is_msw demarkup );
use File::LoadLines;
use ChordPro::Paths;

my $wv;

sub new {
    my $self = shift;
    $self = $self->SUPER::new(@_);

    $wv = is_msw ? 0 : eval { use Wx::WebView; 1 };
    if ( $wv ) {
	my $w = Wx::WebView::New( $self->{p_preview},
				  wxID_ANY,
				  CP->findres( "chordpro-icon.png",
					       class => "icons" ) );
	$self->{sz_prv}->Replace( $self->{webview}, $w, 1 );
	$self->{webview}->Destroy;
	$self->{webview} = $w;
	$self->{sz_prv}->Layout;
    }

    $self->{sw_main}->Unsplit(undef);
    return $self;
}

sub refresh {
    my ( $self ) = @_;
    my $conf = Wx::ConfigBase::Get;
    $self->{dp_folder}->SetPath( $self->GetParent->{_sbefolder} // $conf->Read( CFGBASE . "folder" ) // "");
    $self->{t_exporttitle}->SetValue($conf->Read( CFGBASE . "title" ) // "");
    $self->{t_exportstitle}->SetValue($conf->Read( CFGBASE . "subtitle" ) // "");
    $self->{fp_cover}->SetPath($conf->Read( CFGBASE . "cover" ) // "");
    $self->{cb_stdcover}->SetValue($conf->Read( CFGBASE . "stdcover" ) // 0);
    $self->OnStdCoverChecked();

    Wx::Event::EVT_DIRPICKER_CHANGED( $self, $self->{dp_folder}->GetId,
				      $self->can("OnDirPickerChanged") );


    $self->{_sbefiles} = [];

    if ( -d $self->{dp_folder}->GetPath ) {
	$self->OnDirPickerChanged(undef);
    }

}

sub log {
    my $self = shift;
    $self->GetParent->log(@_);
}

sub alert {
    my ( $self ) = @_;
    $self->{b_msgs}->SetBackgroundColour(Wx::Colour->new(255, 0, 0));
    $self->{bmb_messages}->SetBackgroundColour(Wx::Colour->new(255, 0, 0));
}

sub save_prefs {
    my ( $self ) = @_;
    my $conf = Wx::ConfigBase::Get;
    $conf->Write( CFGBASE . "folder",   $self->{dp_folder}->GetPath // "" );
    $conf->Write( CFGBASE . "title",    $self->{t_exporttitle}->GetValue // "" );
    $conf->Write( CFGBASE . "subtitle",    $self->{t_exportstitle}->GetValue // "" );
    $conf->Write( CFGBASE . "cover",    $self->{fp_cover}->GetPath // "" );
    $conf->Write( CFGBASE . "stdcover", $self->{cb_stdcover}->IsChecked // 0 );
}

################ Event handlers ################

sub OnDirPickerChanged {
    my ( $self, $event ) = @_;

    my $folder = $self->{dp_folder}->GetPath;
    opendir( my $dir, $folder )
      or do {
	$self->GetParent->log( 'W', "Error opening folder $folder: $!");
	my $md = Wx::MessageDialog->new
	  ( $self,
	    "Error opening folder $folder: $!",
	    "Error",
	    wxOK | wxICON_ERROR );
	my $ret = $md->ShowModal;
	$md->Destroy;
	return;
    };

    my @files;
    my $src = "filelist.txt";
    if ( -s "$folder/$src" ) {
	$self->{cb_filelist}->Enable;
	$self->{cb_recursive}->Disable;
    }
    else {
	$self->{cb_filelist}->Disable;
    }
    if ( -s "$folder/$src" && !$self->{cb_filelist}->IsChecked ) {
	@files = loadlines("$folder/$src");
    }
    else {
	$src = "folder";
	use File::Find qw(find);
	my $recurse = $self->{cb_recursive}->IsChecked;
	find sub {
	    if ( -s && m/^[^.].*\.(cho|crd|chopro|chord|chordpro|pro)$/ ) {
		push( @files, $File::Find::name );
	    }
	    if ( -d && $File::Find::name ne $folder ) {
		$File::Find::prune = !$recurse;
		$self->{cb_recursive}->Enable;
	    }
	}, $folder;
	@files = map { decode_utf8( s;^\Q$folder\E/?;;r) } sort @files;
    }

    my $n = scalar(@files);
    my $msg = "Found $n ChordPro file" . ( $n == 1 ? "" : "s" ) . " in $src" .
      ( $self->{cb_recursive}->IsChecked ? "s" : "" );
    $self->{l_info}->SetLabel($msg);
    $self->log( 'S', $msg );

    if ( $Wx::wxVERSION < 3.001 ) {
	# Due to bugs in the implementation of the wxRearrangeCtrl widget
	# we cannot update it, so we must recreate the widget.
	# https://github.com/wxWidgets/Phoenix/issues/1052#issuecomment-434388084
	my @order = ( 0 .. $#files );
	my $w = Wx::RearrangeCtrl->new($self->{sz_export_outer}->GetStaticBox(), wxID_ANY, wxDefaultPosition, wxDefaultSize, \@order, \@files );
	$self->{sz_export_outer}->Replace( $self->{w_rearrange}, $w, 1 );
	$self->{w_rearrange}->Destroy;
	$self->{w_rearrange} = $w;
    }
    else {
	$self->{w_rearrange}->GetList->Set(\@files);
	$self->{w_rearrange}->GetList->Check($_,1) for 0..$#files;
    }
    unless ( $self->{w_rearrange}->IsShown ) {
	$self->{sl_rearrange}->Show;
	$self->{l_rearrange}->Show;
	$self->{w_rearrange}->Show;
	$self->{sz_export_inner}->Layout;
    }
    $self->{sz_main}->Layout;
    $self->{_sbefiles} = \@files;
}

sub OnFilelistIgnore {
    my ( $self, $event ) = @_;
    $self->OnDirPickerChanged($event);
}

sub OnRecursive {
    my ( $self, $event ) = @_;
    $self->OnDirPickerChanged($event);
}

sub OnStdCoverChecked {
    my ( $self, $event ) = @_;
    $self->{l_cover}->Enable( !$self->{cb_stdcover}->IsChecked );
    $self->{fp_cover}->Enable( !$self->{cb_stdcover}->IsChecked );
    $self->{l_exporttitle}->Enable( $self->{cb_stdcover}->IsChecked );
    $self->{t_exporttitle}->Enable( $self->{cb_stdcover}->IsChecked );
    $self->{l_exportstitle}->Enable( $self->{cb_stdcover}->IsChecked );
    $self->{t_exportstitle}->Enable( $self->{cb_stdcover}->IsChecked );
}

sub OnPreferences {
    my ( $self, $event ) = @_;
    $self->GetParent->OnPreferences($event);
}

sub OnPreview {
    my ( $self, $event ) = @_;

    my $folder = $self->{dp_folder}->GetPath;
    my @files = @{ $self->{_sbefiles} };
    unless ( $folder && @files ) {
	my $md = Wx::MessageDialog->new
	  ( $self,
	    "Please select a folder!",
	    "No folder selected",
	    wxOK | wxICON_ERROR );
	my $ret = $md->ShowModal;
	$md->Destroy;
	return;
    }

    $self->save_prefs();

    my $filelist = "";
    my @o = $self->{w_rearrange}->GetList->GetCurrentOrder;
    for ( $self->{w_rearrange}->GetList->GetCurrentOrder ) {
	$filelist .= "$folder/$files[$_]\n" unless $_ < 0;
    }
    if ( $filelist eq "" ) {
	my $md = Wx::MessageDialog->new
	  ( $self,
	    "Please select one or more song files.",
	    "No songs selected",
	    wxOK | wxICON_ERROR );
	my $ret = $md->ShowModal;
	$md->Destroy;
	return;
    }

    my @args = ( "--filelist", \$filelist );
    my %opts = ( target => $self, filelist => 1 );

    if ( $self->{cb_stdcover}->IsChecked ) {
	push( @args, "--title",
	      encode_utf8($self->{t_exporttitle}->GetValue // "") );
	if ( my $stitle = $self->{t_exportstitle}->GetValue ) {
	    push( @args, "--subtitle", encode_utf8($stitle) );
	}
    }
    elsif ( my $cover = $self->{fp_cover}->GetPath ) {
	push( @args, "--cover", encode_utf8($cover) );
    }
    $self->GetParent->preview( \@args, %opts );

    $event->Skip;
}

sub OnPreviewClose {
    my ( $self, $event ) = @_;
    return unless $self->{sw_main}->IsSplit;
    $self->{sw_main}->Unsplit(undef);
    $self->{b_preview_close}->Show(0);
    $self->{b_preview_save}->Show(0);
    $self->{sz_buttons}->Layout;
}

sub OnPreviewSave {
    my ( $self, $event ) = @_;
    $self->GetParent->save_preview;
}

sub OnShowMessages {
    my ( $self, $event ) = @_;
    $self->{b_msgs}->SetBackgroundColour(wxNullColour);
    $self->{bmb_messages}->SetBackgroundColour(wxNullColour);
    $self->GetParent->{_prev_mode} = "SBEX";
    $self->GetParent->select_mode("MSGS");
}

1;
