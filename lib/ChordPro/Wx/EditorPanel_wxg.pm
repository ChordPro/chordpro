# generated by wxGlade 1.1.0b1 on Tue Oct 15 21:42:41 2024
#
# To get wxPerl visit http://www.wxperl.it
#

use Wx qw[:allclasses];
use strict;

# begin wxGlade: dependencies
use Wx::ArtProvider qw/:artid :clientid/;
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package ChordPro::Wx::EditorPanel_wxg;

use Wx qw[:everything];
use base qw(Wx::Panel);
use strict;

# begin wxGlade: dependencies
use Wx::ArtProvider qw/:artid :clientid/;
# end wxGlade

sub new {
    my( $self, $parent, $id, $pos, $size, $style, $name ) = @_;
    $parent //= undef;
    $id     //= -1;
    $pos    //= wxDefaultPosition;
    $size   //= wxDefaultSize;
    $name   //= "";

    # begin wxGlade: ChordPro::Wx::EditorPanel_wxg::new
    use ChordPro::Wx::Utils;
    $style = wxTAB_TRAVERSAL
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $pos, $size, $style, $name );
    
    $self->{sz_main} = Wx::BoxSizer->new(wxVERTICAL);
    
    $self->{sw_main} = Wx::SplitterWindow->new($self, wxID_ANY);
    $self->{sw_main}->SetMinimumPaneSize(20);
    $self->{sw_main}->SetSashGravity(0.5);
    $self->{sz_main}->Add($self->{sw_main}, 1, wxEXPAND, 0);
    
    $self->{p_left} = Wx::Panel->new($self->{sw_main}, wxID_ANY);
    
    $self->{sz_source} = Wx::BoxSizer->new(wxVERTICAL);
    
    $self->{sizer_1} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sz_source}->Add($self->{sizer_1}, 0, wxEXPAND, 0);
    
    my $label_2 = Wx::StaticText->new($self->{p_left}, wxID_ANY, "ChordPro");
    $self->{sizer_1}->Add($label_2, 0, wxALIGN_CENTER_VERTICAL, 0);
    
    $self->{sizer_1}->Add(1, 1, 1, wxEXPAND, 0);
    
    $self->{bmb_preferences} = Wx::BitmapButton->new($self->{p_left}, wxID_ANY, Wx::ArtProvider::GetBitmap(wxART_EXECUTABLE_FILE, wxART_TOOLBAR, wxDefaultSize));
    $self->{bmb_preferences}->SetToolTip("Preferences");
    $self->{bmb_preferences}->SetSize($self->{bmb_preferences}->GetBestSize());
    $self->{sizer_1}->Add($self->{bmb_preferences}, 0, wxRIGHT, 4);
    
    $self->{bmb_preview} = Wx::BitmapButton->new($self->{p_left}, wxID_ANY, Wx::ArtProvider::GetBitmap(wxART_PRINT, wxART_TOOLBAR, wxDefaultSize));
    $self->{bmb_preview}->SetToolTip("Preview");
    $self->{bmb_preview}->SetSize($self->{bmb_preview}->GetBestSize());
    $self->{sizer_1}->Add($self->{bmb_preview}, 0, wxRIGHT, 4);
    
    $self->{bmb_messages} = Wx::BitmapButton->new($self->{p_left}, wxID_ANY, Wx::ArtProvider::GetBitmap(wxART_LIST_VIEW, wxART_TOOLBAR, wxDefaultSize));
    $self->{bmb_messages}->SetToolTip("Show messages");
    $self->{bmb_messages}->SetSize($self->{bmb_messages}->GetBestSize());
    $self->{sizer_1}->Add($self->{bmb_messages}, 0, 0, 0);
    
    $self->{t_source} = Wx::TextCtrl->new($self->{p_left}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE);
    $self->{t_source}->SetFocus();
    $self->{sz_source}->Add($self->{t_source}, 1, wxEXPAND, 0);
    
    $self->{sizer_2} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sz_source}->Add($self->{sizer_2}, 0, wxEXPAND|wxTOP, 5);
    
    $self->{l_status} = Wx::StaticText->new($self->{p_left}, wxID_ANY, "Status");
    $self->{l_status}->Show(0);
    $self->{sizer_2}->Add($self->{l_status}, 1, wxALIGN_CENTER_VERTICAL, 0);
    
    $self->{b_prefs} = Wx::Button->new($self->{p_left}, wxID_PREFERENCES, "");
    $self->{b_prefs}->Show(0);
    $self->{sizer_2}->Add($self->{b_prefs}, 0, wxEXPAND|wxRIGHT, 5);
    
    $self->{b_preview} = Wx::Button->new($self->{p_left}, wxID_ANY, "Preview");
    $self->{b_preview}->Show(0);
    $self->{sizer_2}->Add($self->{b_preview}, 0, wxEXPAND|wxRIGHT, 5);
    
    $self->{b_msgs} = Wx::Button->new($self->{p_left}, wxID_ANY, "Show Messages");
    $self->{b_msgs}->Show(0);
    $self->{sizer_2}->Add($self->{b_msgs}, 0, wxEXPAND, 5);
    
    $self->{p_preview} = Wx::Panel->new($self->{sw_main}, wxID_ANY);
    
    $self->{sz_prv} = Wx::BoxSizer->new(wxVERTICAL);
    
    $self->{sizer_3} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sz_prv}->Add($self->{sizer_3}, 0, wxEXPAND, 0);
    
    my $label_1 = Wx::StaticText->new($self->{p_preview}, wxID_ANY, "Preview");
    $self->{sizer_3}->Add($label_1, 0, wxALIGN_CENTER_VERTICAL, 0);
    
    $self->{sizer_3}->Add(1, 1, 1, wxEXPAND, 0);
    
    $self->{bmb_preview_save} = Wx::BitmapButton->new($self->{p_preview}, wxID_ANY, Wx::ArtProvider::GetBitmap(wxART_FILE_SAVE, wxART_TOOLBAR, wxDefaultSize));
    $self->{bmb_preview_save}->SetToolTip("Save PDF");
    $self->{bmb_preview_save}->SetSize($self->{bmb_preview_save}->GetBestSize());
    $self->{sizer_3}->Add($self->{bmb_preview_save}, 0, wxRIGHT, 4);
    
    $self->{bmb_preview_close} = Wx::BitmapButton->new($self->{p_preview}, wxID_ANY, Wx::ArtProvider::GetBitmap(wxART_CLOSE, wxART_TOOLBAR, wxDefaultSize));
    $self->{bmb_preview_close}->SetToolTip("Close preview");
    $self->{bmb_preview_close}->SetSize($self->{bmb_preview_close}->GetBestSize());
    $self->{sizer_3}->Add($self->{bmb_preview_close}, 0, 0, 0);
    
    $self->{webview} = Wx::TextCtrl->new($self->{p_preview}, wxID_ANY, "Preview not available", wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    $self->{sz_prv}->Add($self->{webview}, 1, wxEXPAND, 0);
    
    $self->{sz_buttons} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sz_prv}->Add($self->{sz_buttons}, 0, wxEXPAND|wxTOP, 5);
    
    $self->{sz_buttons}->Add(1, 1, 1, wxEXPAND, 0);
    
    $self->{b_preview_save} = Wx::Button->new($self->{p_preview}, wxID_SAVE, "");
    $self->{b_preview_save}->Show(0);
    $self->{sz_buttons}->Add($self->{b_preview_save}, 0, wxEXPAND|wxRIGHT, 5);
    
    $self->{b_preview_close} = Wx::Button->new($self->{p_preview}, wxID_CLOSE, "");
    $self->{b_preview_close}->Show(0);
    $self->{sz_buttons}->Add($self->{b_preview_close}, 0, wxEXPAND, 0);
    
    $self->{p_preview}->SetSizer($self->{sz_prv});
    
    $self->{p_left}->SetSizer($self->{sz_source});
    
    $self->{sw_main}->SplitVertically($self->{p_left}, $self->{p_preview}, , 752);
    
    $self->SetSizer($self->{sz_main});
    $self->{sz_main}->Fit($self);
    
    $self->Layout();
    Wx::Event::EVT_BUTTON($self, $self->{bmb_preferences}->GetId, $self->can('OnPreferences'));
    Wx::Event::EVT_BUTTON($self, $self->{bmb_preview}->GetId, $self->can('OnPreview'));
    Wx::Event::EVT_BUTTON($self, $self->{bmb_messages}->GetId, $self->can('OnShowMessages'));
    Wx::Event::EVT_TEXT($self, $self->{t_source}->GetId, $self->can('OnText'));
    Wx::Event::EVT_BUTTON($self, $self->{b_prefs}->GetId, $self->can('OnPreferences'));
    Wx::Event::EVT_BUTTON($self, $self->{b_preview}->GetId, $self->can('OnPreview'));
    Wx::Event::EVT_BUTTON($self, $self->{b_msgs}->GetId, $self->can('OnShowMessages'));
    Wx::Event::EVT_BUTTON($self, $self->{bmb_preview_save}->GetId, $self->can('OnPreviewSave'));
    Wx::Event::EVT_BUTTON($self, $self->{bmb_preview_close}->GetId, $self->can('OnPreviewClose'));
    Wx::Event::EVT_BUTTON($self, $self->{b_preview_save}->GetId, $self->can('OnPreviewSave'));
    Wx::Event::EVT_BUTTON($self, $self->{b_preview_close}->GetId, $self->can('OnPreviewClose'));

    # end wxGlade
    return $self;

}


sub OnPreferences {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::EditorPanel_wxg::OnPreferences <event_handler>
    warn "Event handler (OnPreferences) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnPreview {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::EditorPanel_wxg::OnPreview <event_handler>
    warn "Event handler (OnPreview) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnShowMessages {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::EditorPanel_wxg::OnShowMessages <event_handler>
    warn "Event handler (OnShowMessages) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnText {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::EditorPanel_wxg::OnText <event_handler>
    warn "Event handler (OnText) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnPreviewSave {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::EditorPanel_wxg::OnPreviewSave <event_handler>
    warn "Event handler (OnPreviewSave) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnPreviewClose {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::EditorPanel_wxg::OnPreviewClose <event_handler>
    warn "Event handler (OnPreviewClose) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class ChordPro::Wx::EditorPanel_wxg

1;

