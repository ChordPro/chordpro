#!/usr/bin/perl -w -- 
#
# generated by wxGlade 1.1.0 on Sat Nov 30 15:19:20 2024
#
# To get wxPerl visit http://www.wxperl.it
#

use Wx qw[:allclasses];
use strict;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package ChordPro::Wx::NewSongDialog_wxg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;

sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: ChordPro::Wx::NewSongDialog_wxg::new
    $style = wxDEFAULT_DIALOG_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->SetTitle("Create New Song");
    
    $self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
    
    my $label_3 = Wx::StaticText->new($self, wxID_ANY, "New Song", wxDefaultPosition, wxDefaultSize, wxALIGN_CENTER_HORIZONTAL);
    $label_3->SetMinSize(Wx::Size->new(-1, 35));
    $label_3->SetForegroundColour(Wx::Colour->new(0, 104, 217));
    $label_3->SetFont(Wx::Font->new(18, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, 0, ""));
    $self->{sizer_1}->Add($label_3, 0, wxALL|wxEXPAND, 5);
    
    $self->{grid_sizer_1} = Wx::FlexGridSizer->new(6, 2, 15, 15);
    $self->{sizer_1}->Add($self->{grid_sizer_1}, 0, wxEXPAND|wxLEFT|wxRIGHT, 15);
    
    my $l_title = Wx::StaticText->new($self, wxID_ANY, "Title");
    $self->{grid_sizer_1}->Add($l_title, 0, wxALIGN_CENTER_VERTICAL, 0);
    
    $self->{t_title} = Wx::TextCtrl->new($self, wxID_ANY, "");
    $self->{t_title}->SetMinSize($self->{t_title}->ConvertDialogSizeToPixels(Wx::Size->new(204, 12)));
    $self->{t_title}->SetToolTip("Enter the title for the song");
    $self->{grid_sizer_1}->Add($self->{t_title}, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    my $l_subtitle = Wx::StaticText->new($self, wxID_ANY, "Subtitle");
    $self->{grid_sizer_1}->Add($l_subtitle, 0, wxALIGN_CENTER_VERTICAL, 0);
    
    $self->{t_subtitle} = Wx::TextCtrl->new($self, wxID_ANY, "");
    $self->{t_subtitle}->SetToolTip("Optional, a subtitle for the song");
    $self->{grid_sizer_1}->Add($self->{t_subtitle}, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    my $l_artist = Wx::StaticText->new($self, wxID_ANY, "Artist");
    $self->{grid_sizer_1}->Add($l_artist, 0, wxALIGN_CENTER_VERTICAL, 0);
    
    $self->{t_artist} = Wx::TextCtrl->new($self, wxID_ANY, "");
    $self->{t_artist}->SetToolTip("Optional, the artist or composer");
    $self->{grid_sizer_1}->Add($self->{t_artist}, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    my $l_key = Wx::StaticText->new($self, wxID_ANY, "Key");
    $self->{grid_sizer_1}->Add($l_key, 0, wxALIGN_CENTER_VERTICAL, 0);
    
    $self->{t_key} = Wx::TextCtrl->new($self, wxID_ANY, "");
    $self->{t_key}->SetToolTip("Enter the key for the song");
    $self->{grid_sizer_1}->Add($self->{t_key}, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{ch_dir1} = Wx::Choice->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, ["Album", "Arranger", "Capo", "Composer", "Copyright", "Duration", "Lyricist", "Sorttitle", "Tempo", "Time", "Year"], );
    $self->{ch_dir1}->SetSelection(8);
    $self->{grid_sizer_1}->Add($self->{ch_dir1}, 0, 0, 0);
    
    $self->{t_dir1} = Wx::TextCtrl->new($self, wxID_ANY, "");
    $self->{t_dir1}->SetToolTip("Enter additional metadata for the song");
    $self->{grid_sizer_1}->Add($self->{t_dir1}, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{ch_dir2} = Wx::Choice->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, ["Album", "Arranger", "Capo", "Composer", "Copyright", "Duration", "Lyricist", "Sorttitle", "Tempo", "Time", "Year"], );
    $self->{ch_dir2}->SetSelection(8);
    $self->{grid_sizer_1}->Add($self->{ch_dir2}, 0, 0, 0);
    
    $self->{t_dir2} = Wx::TextCtrl->new($self, wxID_ANY, "");
    $self->{t_dir2}->SetToolTip("Enter additional metadata for the song");
    $self->{grid_sizer_1}->Add($self->{t_dir2}, 0, wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{sizer_1}->Add(2, 5, 1, wxEXPAND, 0);
    
    my $static_line_1 = Wx::StaticLine->new($self, wxID_ANY);
    $self->{sizer_1}->Add($static_line_1, 0, wxEXPAND|wxLEFT|wxRIGHT|wxTOP, 10);
    
    $self->{sizer_2} = Wx::StdDialogButtonSizer->new();
    $self->{sizer_1}->Add($self->{sizer_2}, 0, wxALIGN_RIGHT|wxALL, 5);
    
    $self->{button_OK} = Wx::Button->new($self, wxID_OK, "");
    $self->{button_OK}->SetDefault();
    $self->{sizer_2}->AddButton($self->{button_OK});
    
    $self->{button_CANCEL} = Wx::Button->new($self, wxID_CANCEL, "");
    $self->{sizer_2}->AddButton($self->{button_CANCEL});
    
    $self->{sizer_2}->Realize();
    
    $self->{grid_sizer_1}->AddGrowableCol(1);
    
    $self->SetSizer($self->{sizer_1});
    $self->{sizer_1}->Fit($self);
    
    $self->SetAffirmativeId($self->{button_OK}->GetId());
    $self->SetEscapeId($self->{button_CANCEL}->GetId());
    
    $self->Layout();
    Wx::Event::EVT_BUTTON($self, $self->{button_OK}->GetId, $self->can('OnAccept'));
    Wx::Event::EVT_BUTTON($self, $self->{button_CANCEL}->GetId, $self->can('OnCancel'));

    # end wxGlade
    return $self;

}


sub OnAccept {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::NewSongDialog_wxg::OnAccept <event_handler>
    warn "Event handler (OnAccept) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnCancel {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::NewSongDialog_wxg::OnCancel <event_handler>
    warn "Event handler (OnCancel) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class ChordPro::Wx::NewSongDialog_wxg

1;

package MyApp;

use base qw(Wx::App);
use strict;

sub OnInit {
    my( $self ) = shift;

    Wx::InitAllImageHandlers();

    my $dialog = ChordPro::Wx::NewSongDialog_wxg->new();

    $self->SetTopWindow($dialog);
    $dialog->Show(1);

    return 1;
}
# end of class MyApp

package main;

unless(caller){
    my $app = MyApp->new();
    $app->MainLoop();
}
