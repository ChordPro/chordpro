# generated by wxGlade 1.1.0 on Fri Nov 29 21:52:12 2024
#
# To get wxPerl visit http://www.wxperl.it
#

use Wx qw[:allclasses];
use strict;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package ChordPro::Wx::RenderDialog_wxg;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;

use Wx::Locale gettext => '_T';
sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: ChordPro::Wx::RenderDialog_wxg::new
    use ChordPro::Wx::Utils;
    $style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->SetTitle(_T("Preview Tasks"));
    
    $self->{sz_prefs_outer} = Wx::BoxSizer->new(wxVERTICAL);
    
    my $label_3 = Wx::StaticText->new($self, wxID_ANY, _T("Preview Tasks"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTER_HORIZONTAL);
    $label_3->SetForegroundColour(Wx::Colour->new(0, 104, 217));
    $label_3->SetFont(Wx::Font->new(18, wxDEFAULT, wxNORMAL, wxNORMAL, 0, ""));
    $self->{sz_prefs_outer}->Add($label_3, 0, wxALL|wxEXPAND, 5);
    
    $self->{sz_prefs_inner} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sz_prefs_outer}->Add($self->{sz_prefs_inner}, 0, wxEXPAND|wxLEFT|wxRIGHT|wxTOP, 5);
    
    $self->{sizer_2} = Wx::GridBagSizer->new(5, 5);
    $self->{sz_prefs_inner}->Add($self->{sizer_2}, 1, wxEXPAND, 5);
    
    my $label_1 = Wx::StaticText->new($self, wxID_ANY, _T("Tasks"));
    $self->{sizer_2}->Add($label_1, Wx::GBPosition->new(0, 0), Wx::GBSpan->new(1, 1), wxLEFT|wxTOP, 5);
    
    $self->{sizer_1} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_2}->Add($self->{sizer_1}, Wx::GBPosition->new(0, 1), Wx::GBSpan->new(1, 1), wxEXPAND|wxTOP, 5);
    
    $self->{cb_task_no_diagrams} = Wx::CheckBox->new($self, wxID_ANY, _T("Suppress the chord diagrams"));
    $self->{cb_task_no_diagrams}->SetToolTipString(_T("Do not include the chord diagrams"));
    $self->{sizer_1}->Add($self->{cb_task_no_diagrams}, 0, 0, 0);
    
    $self->{cb_task_lyrics_only} = Wx::CheckBox->new($self, wxID_ANY, _T("Only lyrics (no chords, ABC, LilyPond, ...)"));
    $self->{cb_task_lyrics_only}->SetToolTipString(_T("Show only the lyrics of the song"));
    $self->{sizer_1}->Add($self->{cb_task_lyrics_only}, 0, 0, 0);
    
    $self->{cb_task_decapo} = Wx::CheckBox->new($self, wxID_ANY, _T("Eliminate the capo settings"));
    $self->{cb_task_decapo}->SetToolTipString(_T("Show the chords as they sound, eliminating the need for a capo setting"));
    $self->{sizer_1}->Add($self->{cb_task_decapo}, 0, 0, 0);
    
    $self->{l_customtasks} = Wx::StaticText->new($self, wxID_ANY, _T("Custom"));
    $self->{l_customtasks}->Show(0);
    $self->{sizer_2}->Add($self->{l_customtasks}, Wx::GBPosition->new(1, 0), Wx::GBSpan->new(1, 1), wxLEFT, 5);
    
    $self->{sz_customtasks} = Wx::BoxSizer->new(wxVERTICAL);
    $self->{sizer_2}->Add($self->{sz_customtasks}, Wx::GBPosition->new(1, 1), Wx::GBSpan->new(1, 1), wxEXPAND, 0);
    
    $self->{sz_customtasks}->Add(0, 0, 0, 0, 0);
    
    my $static_line_5 = Wx::StaticLine->new($self, wxID_ANY);
    $self->{sizer_2}->Add($static_line_5, Wx::GBPosition->new(2, 0), Wx::GBSpan->new(1, 2), wxEXPAND|wxLEFT|wxRIGHT, 5);
    
    $self->{cb_xpose} = Wx::CheckBox->new($self, wxID_ANY, _T("Transpose"));
    $self->{sizer_2}->Add($self->{cb_xpose}, Wx::GBPosition->new(3, 0), Wx::GBSpan->new(1, 1), wxALIGN_CENTER_VERTICAL|wxEXPAND, 0);
    
    $self->{sz_xpose} = Wx::BoxSizer->new(wxHORIZONTAL);
    $self->{sizer_2}->Add($self->{sz_xpose}, Wx::GBPosition->new(3, 1), Wx::GBSpan->new(1, 1), wxALIGN_CENTER_VERTICAL|wxEXPAND, 5);
    
    $self->{l_xpose_from} = Wx::StaticText->new($self, wxID_ANY, _T("From"));
    $self->{sz_xpose}->Add($self->{l_xpose_from}, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 5);
    
    $self->{ch_xpose_from} = Wx::Choice->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, [_T("C"), _T("C#"), _T("Db"), _T("D"), _T("D#"), _T("Eb"), _T("E"), _T("F"), _T("F#"), _T("Gb"), _T("G"), _T("G#"), _T("Ab"), _T("A"), _T("A#"), _T("Bb"), _T("B")], );
    $self->{ch_xpose_from}->SetToolTipString(_T("Starting note for transposition"));
    $self->{ch_xpose_from}->SetSelection(0);
    $self->{sz_xpose}->Add($self->{ch_xpose_from}, 0, 0, 0);
    
    $self->{l_xpose_to} = Wx::StaticText->new($self, wxID_ANY, _T("To"));
    $self->{sz_xpose}->Add($self->{l_xpose_to}, 0, wxALIGN_CENTER_VERTICAL|wxFIXED_MINSIZE|wxLEFT|wxRIGHT, 5);
    
    $self->{ch_xpose_to} = Wx::Choice->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, [_T("C"), _T("C#"), _T("Db"), _T("D"), _T("D#"), _T("Eb"), _T("E"), _T("F"), _T("F#"), _T("Gb"), _T("G"), _T("G#"), _T("Ab"), _T("A"), _T("A#"), _T("Bb"), _T("B")], );
    $self->{ch_xpose_to}->SetToolTipString(_T("Target note for transposition"));
    $self->{ch_xpose_to}->SetSelection(0);
    $self->{sz_xpose}->Add($self->{ch_xpose_to}, 0, 0, 0);
    
    $self->{sz_xpose}->Add(15, 2, 1, wxEXPAND, 0);
    
    my $l_acc = Wx::StaticText->new($self, wxID_ANY, _T("Use Flats or Sharps"));
    $self->{sz_xpose}->Add($l_acc, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT, 5);
    
    $self->{ch_acc} = Wx::Choice->new($self, wxID_ANY, wxDefaultPosition, wxDefaultSize, [_T("Default"), _T("Sharps"), _T("Flats")], );
    $self->{ch_acc}->SetToolTipString(_T("How to treat chords that need accidentals after transposition.\nDefault is to use sharps when transposing up, and flats when transposing down."));
    $self->{ch_acc}->SetSelection(0);
    $self->{sz_xpose}->Add($self->{ch_acc}, 0, wxEXPAND|wxRIGHT, 5);
    
    $self->{sz_prefs_outer}->Add(1, 5, 1, wxEXPAND, 0);
    
    my $static_line_1 = Wx::StaticLine->new($self, wxID_ANY);
    $self->{sz_prefs_outer}->Add($static_line_1, 0, wxEXPAND|wxLEFT|wxRIGHT|wxTOP, 10);
    
    $self->{sz_tasks_buttons} = Wx::StdDialogButtonSizer->new();
    $self->{sz_prefs_outer}->Add($self->{sz_tasks_buttons}, 0, wxALL|wxEXPAND, 5);
    
    $self->{b_cancel} = Wx::Button->new($self, wxID_CANCEL, "");
    $self->{b_cancel}->SetToolTipString(_T("Close the dialog without doing anything"));
    $self->{sz_tasks_buttons}->AddButton($self->{b_cancel});
    
    $self->{b_ok} = Wx::Button->new($self, wxID_OK, "");
    $self->{b_ok}->SetToolTipString(_T("Generate the preview"));
    $self->{b_ok}->SetDefault();
    $self->{sz_tasks_buttons}->AddButton($self->{b_ok});
    
    $self->{sz_tasks_buttons}->Realize();
    
    $self->{sizer_2}->AddGrowableRow(1);
    $self->{sizer_2}->AddGrowableCol(1);
    
    $self->SetSizer($self->{sz_prefs_outer});
    $self->{sz_prefs_outer}->Fit($self);
    
    $self->SetAffirmativeId($self->{b_ok}->GetId());
    $self->SetEscapeId($self->{b_cancel}->GetId());
    
    $self->Layout();
    Wx::Event::EVT_CHECKBOX($self, $self->{cb_xpose}->GetId, $self->can('OnCbTranspose'));
    Wx::Event::EVT_CHOICE($self, $self->{ch_xpose_from}->GetId, $self->can('OnXposeFrom'));
    Wx::Event::EVT_CHOICE($self, $self->{ch_xpose_to}->GetId, $self->can('OnXposeTo'));
    Wx::Event::EVT_BUTTON($self, $self->{b_cancel}->GetId, $self->can('OnCancel'));
    Wx::Event::EVT_BUTTON($self, $self->{b_ok}->GetId, $self->can('OnAccept'));

    # end wxGlade
    return $self;

}


sub OnCbTranspose {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::RenderDialog_wxg::OnCbTranspose <event_handler>
    warn "Event handler (OnCbTranspose) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnXposeFrom {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::RenderDialog_wxg::OnXposeFrom <event_handler>
    warn "Event handler (OnXposeFrom) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnXposeTo {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::RenderDialog_wxg::OnXposeTo <event_handler>
    warn "Event handler (OnXposeTo) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnCancel {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::RenderDialog_wxg::OnCancel <event_handler>
    warn "Event handler (OnCancel) not implemented";
    $event->Skip;
    # end wxGlade
}


sub OnAccept {
    my ($self, $event) = @_;
    # wxGlade: ChordPro::Wx::RenderDialog_wxg::OnAccept <event_handler>
    warn "Event handler (OnAccept) not implemented";
    $event->Skip;
    # end wxGlade
}


# end of class ChordPro::Wx::RenderDialog_wxg

1;

