on:
  release:
    types:
      - created
  workflow_dispatch:

name: Handle Release
jobs:
  generate:
    name: Create release appimage artifact
    runs-on: ubuntu-latest
    steps:

      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set Env Vars
        run: |
          PERL5LIB=${{ runner.temp }}/build-cpan/lib/perl5
          CHORDPRO_VERSION=$(perl lib/ChordPro/Version.pm)
          echo "${{ runner.temp }}" >> "$GITHUB_PATH"
          echo "PERL5LIB=$PERL5LIB" >> "$GITHUB_ENV"
          echo "CHORDPRO_VERSION=$CHORDPRO_VERSION" >> "$GITHUB_ENV"

      - name: Install wxWidgets
        run: |
          sudo apt install -y libwxgtk-webview3.2-dev cpanminus
          sudo apt-get remove libalien-wxwidgets-perl libwx-perl
          sudo apt-get purge libalien-wxwidgets-perl libwx-perl

      - name: Install Alien-wxWidgets
        run: |
          cpanm --sudo https://github.com/sciurius/perl-Alien-wxWidgets/releases/download/R0.71/Alien-wxWidgets-0.72.tar.gz
          perl -MAlien::wxWidgets -E 'say Alien::wxWidgets->libraries'

      - name: Install wxPerl
        run: |
          cpanm --sudo https://github.com/sciurius/wxPerl/releases/download/R3.008/Wx-3.008.tar.gz || cat $HOME/.cpanm/build.log && exit 1

      - name: Install other dependencies
        run: |
          sudo apt install -y liblocal-lib-perl libgtk-3-dev libperl-dev libdeflate0 libsdl2-2.0-0 libpar-packer-perl desktop-file-utils
          wget -O ${{ runner.temp }}/appimagetool https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x ${{ runner.temp }}/appimagetool
          cpanm -n -l ${{ runner.temp }}/build-cpan . HarfBuzz::Shaper

      - name: Build ChordPro
        run: |
          perl Makefile.pl
          make -f Makefile all test

      - name: Build AppImage
        run: |
          cd pp/debian
          make
          chmod +x ChordPro-$CHORDPRO_VERSION.AppImage
          zip "${{ runner.temp }}/ChordPro-$CHORDPRO_VERSION-Linux_x86_64-AppImage.zip" ChordPro-$CHORDPRO_VERSION.AppImage
          ls -l "${{ runner.temp }}"

      - name: Upload the testing artifact
        uses: actions/upload-artifact@v4
        with:
          compression-level: 0
          name: "ChordPro-${{ env.CHORDPRO_VERSION }}.AppImage"
          path: "pp/debian/ChordPro-${{ env.CHORDPRO_VERSION }}.AppImage"

      - if: ${{ github.event.release.upload_url }}
        name: Upload the release artifact
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "${{ runner.temp }}/ChordPro-${{ env.CHORDPRO_VERSION }}-Linux_x86_64-AppImage.zip"
